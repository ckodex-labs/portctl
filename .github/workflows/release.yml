name: Release

on:
  push:
    tags:
      - 'v*.*.*'   # Triggers on version tags like v1.2.3

permissions:
  contents: write      # For GitHub Releases
  packages: write      # For Docker/GHCR
  id-token: write      # For OIDC keyless signing with Cosign

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for changelog and tag diff

      - name: Install Dagger CLI
        run: |
          curl -L https://dl.dagger.io/dagger/install.sh | sh
          echo "$HOME/.dagger/bin" >> $GITHUB_PATH
          echo "$PWD/bin" >> $GITHUB_PATH

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.3'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Dagger Lint
        run: dagger call lint

      - name: Dagger Test
        run: dagger call test

      - name: Dagger Build
        run: dagger call build
      - name: Upload Build Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: ./artifacts

      - name: Dagger Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: dagger call release
      - name: Upload Release Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: ./artifacts

      # Optional: Install Cosign for verification/debugging
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.7.0

      # Optional: Install Syft for SBOM generation
      - name: Install Syft
        uses: anchore/sbom-action/download-syft@v0.17.9

      # Docker buildx for multi-arch Docker images
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Homebrew tap: Use a Personal Access Token with workflow scope for cross-repo push
      - name: Set up Homebrew tap token
        run: echo "TAP_GITHUB_TOKEN=${{ secrets.TAP_GITHUB_TOKEN }}" >> $GITHUB_ENV

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: "~> v2"
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAP_GITHUB_TOKEN: ${{ secrets.TAP_GITHUB_TOKEN }}  # For Homebrew tap publishing

      # Automated signature verification for all release artifacts
      - name: Verify signatures for all release artifacts
        run: |
          for file in dist/*.tar.gz; do
            sig="${file}.sig"
            if [ -f "$sig" ]; then
              echo "Verifying $file ..."
              cosign verify-blob \
                --certificate-identity "https://github.com/${{ github.repository_owner }}/${{ github.repository }}" \
                --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
                "$file" --signature "$sig"
            fi
          done

      # (Optional) Verify Docker image signatures (if using cosign sign for images)
      # - name: Verify Docker image signatures
      #   run: |
      #     cosign verify ghcr.io/${{ github.repository_owner }}/portctl:$(git describe --tags) \
      #       --certificate-identity "https://github.com/${{ github.repository_owner }}/${{ github.repository }}" \
      #       --certificate-oidc-issuer "https://token.actions.githubusercontent.com"

      - name: Dagger Deploy (optional)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: dagger call deploy --src=.
      - name: Upload Deploy Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deploy-artifacts
          path: ./artifacts 